---
layout: post
title:  "Stack"
date:   2021-01-06
categories: Algoritm
---
Take a look at full implementation of [Stack](https://github.com/michal0janczyk/interview_preparation/blob/master/Coding%20Challenges/Educative/Data%20Structures%20and%20Algorithms%20in%20Python/Stack/stack.py)

Stack was implemented according to the principle: **LIFO = FILO**

Pile of books. If we want to retrieve a book from this stack, you can take the book on top. Taking a book from the bottom is a bit precarious and we don’t want to topple the entire stack. Therefore, we’ll take down the top book on the stack and read it or do whatever we want to do with it.

<style type="text/css">
.tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}
.tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}
</style>
<table class="tg">
<thead>
  <tr>
    <th class="tg-c3ow" rowspan="2">Data Structure</th>
    <th class="tg-c3ow" colspan="3">Average cases</th>
    <th class="tg-c3ow" colspan="3">Worst cases</th>
  </tr>
  <tr>
    <td class="tg-c3ow">Insert</td>
    <td class="tg-c3ow">Delete</td>
    <td class="tg-c3ow">Search</td>
    <td class="tg-c3ow">Insert</td>
    <td class="tg-c3ow">Delete</td>
    <td class="tg-c3ow">Search</td>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-c3ow">Array/Stack/Queue</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(n)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(n)</td>
  </tr>
  <tr>
    <td class="tg-c3ow">Linked List</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(n)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(n)</td>
  </tr>
  <tr>
    <td class="tg-c3ow">Doubly Linked List</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(n)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(n)</td>
  </tr>
  <tr>
    <td class="tg-c3ow">Hash Table</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(1)</td>
    <td class="tg-c3ow">O(n)</td>
    <td class="tg-c3ow">O(n)</td>
    <td class="tg-c3ow">O(n)</td>
  </tr>
  <tr>
    <td class="tg-c3ow">Binary Search Tree</td>
    <td class="tg-c3ow">O(log(n))</td>
    <td class="tg-c3ow">O(log(n))</td>
    <td class="tg-c3ow">O(log(n))</td>
    <td class="tg-c3ow">O(n)</td>
    <td class="tg-c3ow">O(n)</td>
    <td class="tg-c3ow">O(n)</td>
  </tr>
</tbody>
</table>

# Stack Operations

- Push - The operation to insert elements in a stack is called push. Push adds the element in the last place, so the new element automatically becomes the top.
- Pop - Popping is when we take the top book of the stack and put it down. Deletes the most recently added item.
- Peek - “What’s the top element?” and it can give that to us using the peek operation. Note that the peek operation does not remove the top element, it merely returns it

# Implementation

```python
class Stack():
    def __init__(self):
        self.items = []

    def size(self):
        return len(self.items)

    def push(self, item):
        self.items.append(item)				

    def pop(self):
        return self.items.pop()

    def is_empty(self):
        return self.items == []

    def peek(self):
        if not self.is_empty():
            return self.items[-1]

    def get_stack(self):
        return self.items
```
