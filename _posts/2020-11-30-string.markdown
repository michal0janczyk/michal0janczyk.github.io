---
layout: post
title:  "String"
date:   2020-11-30
categories: Algoritm
---
The first thing to understand is that a string in Python or C ++ is a variable length array.

This seemingly small difference is quite important from a systemic point of view:
- a normal array is statically determined in the program from the start
- has a known length
- we know how to read individual elements

Since the length of the table can change while the program is running, the compiler needs additional information - a line end marker, which is a special code of zeros '\0'

What's the difference between ASCII and Unicode?
ASCII defines 128 characters, which map to the numbers 0–127. Unicode defines (less than) 221 characters, which, similarly, map to numbers 0–221 (though not all numbers are currently assigned, and some are reserved). Unicode is a superset of ASCII, and the numbers 0–127 have the same meaning in ASCII as they have in Unicode. For example, the number 65 means "Latin capital 'A'". Because Unicode characters don't generally fit into one 8-bit byte, there are numerous ways of storing Unicode characters in byte sequences, such as UTF-32 and UTF-8.


Strings in Python 
{% highlight python %}
    >>> import sys
    >>> sys.getsizeof("")
    40 
{% endhighlight %}

In Python strings are objects, so that values is the size of the object itself. So this size will always be bigger than the string size itself.
From `stringobject.h`:

{% highlight python %}
    typedef struct {
        PyObject_VAR_HEAD
        long ob_shash;
        int ob_sstate;
        char ob_sval[1];
    
        /* Invariants:
         *     ob_sval contains space for 'ob_size+1' elements.
         *     ob_sval[ob_size] == 0.
         *     ob_shash is the hash of the string or -1 if not computed yet.
         *     ob_sstate != 0 iff the string object is in stringobject.c's
         *       'interned' dictionary; in this case the two references
         *       from 'interned' to this object are *not counted* in ob_refcnt.
         */
    } PyStringObject;
{% endhighlight %}

From here you can get some clues on how those bytes are used:

- `len(str)+1` bytes to store the string itself
- 8 bytes for the hash

